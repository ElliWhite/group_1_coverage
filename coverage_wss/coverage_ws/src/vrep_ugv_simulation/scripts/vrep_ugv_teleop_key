#!/usr/bin/env python

import sys

from PyQt4 import QtCore, QtGui

import rospy
import std_msgs.msg
import geometry_msgs.msg

keys = {
    QtCore.Qt.Key_Insert: 0,
    QtCore.Qt.Key_Delete: 0,
    QtCore.Qt.Key_PageUp: 0,
    QtCore.Qt.Key_PageDown: 0,
    QtCore.Qt.Key_Home: 0,
    QtCore.Qt.Key_End: 0,
    QtCore.Qt.Key_Left: 0,
    QtCore.Qt.Key_Right: 0,
    QtCore.Qt.Key_Up: 0,
    QtCore.Qt.Key_Down: 0,
    QtCore.Qt.Key_0: 0
}

control_movement = True
control_flippers = False

tlv = 0
trv = 0
fflp = 0
ffrp = 0
frlp = 0
frrp = 0

travel_speed = 6
steering_speed = 0.66 * travel_speed
flipper_angle_increment = 0.1

use_twist = True

class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__(None, QtCore.Qt.WindowStaysOnTopHint)
        self.initUI()
        
    def initUI(self):
        self.setGeometry(300, 300, 170, 1)
        self.setWindowTitle('UGV TeleOp')
        self.show()

    def keyPressEvent(self, e):
        if e.key() in keys.keys():
            keys[e.key()] = 1
            print('%s -> 1' % e.key())
            self.update()

    def keyReleaseEvent(self, e):
        if e.key() in keys.keys():
            keys[e.key()] = 0
            print('%s -> 0' % e.key())
            self.update()

    def update(self):
        global tw, tl, tr, ffl, ffr, frl, frl, tlv, trv, fflp, ffrp, frlp, frrp
        trv = 0
        tlv = 0
        if keys[QtCore.Qt.Key_Left]: trv += steering_speed; tlv += -steering_speed
        if keys[QtCore.Qt.Key_Right]: trv += -steering_speed; tlv += steering_speed
        if keys[QtCore.Qt.Key_Up]: trv += travel_speed; tlv += travel_speed
        if keys[QtCore.Qt.Key_Down]: trv += -travel_speed; tlv += -travel_speed
        if keys[QtCore.Qt.Key_Home]:
            if keys[QtCore.Qt.Key_Insert]: fflp += flipper_angle_increment
            if keys[QtCore.Qt.Key_Delete]: fflp -= flipper_angle_increment
            if keys[QtCore.Qt.Key_PageUp]: ffrp += flipper_angle_increment
            if keys[QtCore.Qt.Key_PageDown]: ffrp -= flipper_angle_increment
            if keys[QtCore.Qt.Key_0]: ffrp = 0; fflp = 0
        if keys[QtCore.Qt.Key_End]:
            if keys[QtCore.Qt.Key_Insert]: frlp += flipper_angle_increment
            if keys[QtCore.Qt.Key_Delete]: frlp -= flipper_angle_increment
            if keys[QtCore.Qt.Key_PageUp]: frrp += flipper_angle_increment
            if keys[QtCore.Qt.Key_PageDown]: frrp -= flipper_angle_increment
            if keys[QtCore.Qt.Key_0]: frrp = 0; frlp = 0
        if control_movement:
            if use_twist:
                twm = geometry_msgs.msg.Twist()
                twm.linear.x = (tlv+trv)/2*0.09/0.397/2
                twm.angular.z = (trv-tlv)/2*0.09/0.397
                tw.publish(twm)
            else:
                tl.publish(std_msgs.msg.Float32(tlv))
                tr.publish(std_msgs.msg.Float32(trv))
        if control_flippers:
            ffl.publish(std_msgs.msg.Float32(fflp))
            ffr.publish(std_msgs.msg.Float32(ffrp))
            frl.publish(std_msgs.msg.Float32(frlp))
            frr.publish(std_msgs.msg.Float32(frrp))
        
def main():
    global tw, tl, tr, ffl, ffr, frl, frr
    rospy.init_node('vrep_absolem_teleop_key')
    if use_twist:
        tw = rospy.Publisher('/local_joy/cmd_vel', geometry_msgs.msg.Twist)
        tl = None; tl = None
    else:
        tl = rospy.Publisher('/vrep/left_track/velocity', std_msgs.msg.Float32)
        tr = rospy.Publisher('/vrep/right_track/velocity', std_msgs.msg.Float32)
        tw = None
    ffl = rospy.Publisher('/vrep/front_left_flipper/position', std_msgs.msg.Float32)
    ffr = rospy.Publisher('/vrep/front_right_flipper/position', std_msgs.msg.Float32)
    frl = rospy.Publisher('/vrep/rear_left_flipper/position', std_msgs.msg.Float32)
    frr = rospy.Publisher('/vrep/rear_right_flipper/position', std_msgs.msg.Float32)

    app = QtGui.QApplication(sys.argv)
    w = MainWindow()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()

