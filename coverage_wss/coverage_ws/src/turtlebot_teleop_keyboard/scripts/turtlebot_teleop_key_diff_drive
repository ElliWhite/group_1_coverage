#!/usr/bin/env python

import sys

from PyQt4 import QtCore, QtGui

import rospy
import std_msgs.msg
import geometry_msgs.msg
import subprocess

keys = {
    QtCore.Qt.Key_Left: 0,
    QtCore.Qt.Key_Right: 0,
    QtCore.Qt.Key_Up: 0,
    QtCore.Qt.Key_Down: 0,
    QtCore.Qt.Key_Plus: 0,
    QtCore.Qt.Key_Minus: 0
}


travel_speed = 5.5
steering_speed = travel_speed 
travel_speed_increment = 0.05

tlv = 0
trv = 0
robot_baseline = 0.354


class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__(None, QtCore.Qt.WindowStaysOnTopHint)
        self.initUI()
        
        
    def getScreenResolution(self):
        output = subprocess.Popen('xrandr | grep "\*" | cut -d" " -f4',shell=True, stdout=subprocess.PIPE).communicate()[0]
        resolution = output.split()[0].split(b'x')
        return resolution
    
        
    def initUI(self):
        resolution = self.getScreenResolution()
        self.setGeometry(int(resolution[0]), int(resolution[1]), 200, 1)
        self.setWindowTitle('Keyboard TeleOp')
        self.show()
    

    def keyPressEvent(self, e):
        if e.key() in keys.keys():
            keys[e.key()] = 1
            self.update()

    def keyReleaseEvent(self, e):
        if e.key() in keys.keys():
            keys[e.key()] = 0
            self.update()

    def update(self):
        global tw, tlv, trv, travel_speed, steering_speed
        trv = 0
        tlv = 0
        if keys[QtCore.Qt.Key_Left]: 
			trv += steering_speed
			tlv += -steering_speed
        if keys[QtCore.Qt.Key_Right]: 
			trv += -steering_speed
			tlv += steering_speed
        if keys[QtCore.Qt.Key_Up]: 
			trv += travel_speed
			tlv += travel_speed
        if keys[QtCore.Qt.Key_Down]: 
			trv += -travel_speed
			tlv += -travel_speed

        if keys[QtCore.Qt.Key_Plus]: 
			travel_speed += travel_speed_increment 
			steering_speed = travel_speed
			
        if keys[QtCore.Qt.Key_Minus]: 
			travel_speed = max(travel_speed-travel_speed_increment,0) 
			steering_speed = travel_speed

        twm = geometry_msgs.msg.Twist()
        twm.linear.x = 0.5*(tlv+trv)
        twm.angular.z = (trv-tlv)/robot_baseline
        tw.publish(twm)

        
def main():

    global tw

    rospy.init_node('turtlebot_teleop_keyboard')

    tw = rospy.Publisher('/cmd_vel', geometry_msgs.msg.Twist,queue_size=10)

    app = QtGui.QApplication(sys.argv)
    w = MainWindow()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()

